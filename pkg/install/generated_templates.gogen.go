// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-config.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-config.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 463,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x8f\x16\x6f\xdd\x82\x1e\xf7\x26\x05\xc1\x83\x5e\x14\xef\xc3\x66\xb6\x1d\xdc\x26\x4b\x32\xdb\x0a\x31\xff\x5d\x36\xa1\xcb\x2a\x9e\x32\xc3\xbc\xf7\x65\x5e\x92\x12\xa4\xc7\xfe\xe0\x5d\x2f\xc7\x27\x19\xf8\xe0\x9d\xb2\x53\x34\x39\x9b\xa6\x69\xcc\x16\xef\x27\x46\xef\x87\xc1\x5f\xc5\x1d\x21\x11\x53\x64\x0b\xf5\x18\x83\xbf\x88\x65\x10\xba\x62\x9f\x02\xa9\x78\x87\xde\x07\xf4\xc3\xf4\x65\xf7\x66\x8b\xe7\x85\xfe\x18\xeb\xf9\x42\xe3\x4c\x89\xac\x33\x44\xc3\xc4\x3b\xe8\x89\xff\x40\x24\xa2\x0b\x4c\xca\xd6\x6c\x41\x11\x84\xc5\xbd\x83\xd7\x13\x87\xab\x44\x86\xe8\x4a\x59\x75\x6f\xdc\x05\xd6\xbd\xa1\x51\x3e\x38\x44\xf1\xae\xc5\xe5\xde\x7c\x8a\xb3\x2d\x7e\xe5\x5d\x6f\x94\xf3\x52\xa7\x04\x1e\x22\x23\xe7\x8a\x9a\x7b\x67\x91\xb3\x39\xb3\x92\x25\xa5\xd6\x00\x8e\xce\xdc\x96\x9c\x4d\xdd\xdc\xe0\x46\x7f\xa5\x33\xc7\x91\x3a\x2e\xaf\x58\xa5\xa5\x2f\xf7\xaf\xc6\x65\x9a\x52\x73\xe3\x57\x76\x4a\x18\x83\x38\xed\xb1\xb9\x8b\x9b\xff\x3e\xe7\x1b\xe2\xec\x5c\x3c\xcc\xae\x15\xe0\x27\x00\x00\xff\xff\x02\xd2\xd6\x67\xcf\x01\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7901,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdf\x73\xdb\x36\xf2\x7f\xf7\x5f\xb1\xa3\x7c\x67\x12\xcf\x48\x94\x5d\xb7\x9d\xef\xb0\xa7\xce\xa5\xf9\xe1\xfa\xd2\xa4\x9e\x38\xb9\x9b\x3e\xd5\x10\xb9\x12\x31\x02\x01\x1e\x16\x94\xaa\xf1\xf4\x7f\xbf\x59\x80\x20\x41\x49\x76\x72\x7d\xbb\x3c\xc4\x36\xb9\x58\x2c\x3e\xfb\xeb\x83\xe5\x6c\x36\x3b\x13\x8d\xfc\x27\x5a\x92\x46\xe7\x20\x9a\x86\xe6\xdb\xcb\xb3\x8d\xd4\x65\x0e\xaf\xb1\x51\x66\x5f\xa3\x76\x67\x35\x3a\x51\x0a\x27\xf2\x33\x00\x2d\x6a\xcc\x61\xa5\xda\x3f\x1e\x1e\x40\xae\x20\xfb\x20\x6a\xa4\x46\x14\x08\x7f\xfe\xd9\xbd\xf7\x7f\xe6\xf0\xf0\x30\x7e\xfb\xf0\x00\xa8\x4b\x16\xa3\x06\x0b\x56\x66\xb1\x51\xb2\x10\x94\xc3\xe5\x19\x00\xa1\xc2\xc2\x19\xcb\x6f\x00\x6a\xe1\x8a\xea\x17\xb1\x44\x45\xe1\x41\xba\x37\x4b\x3b\x2b\x1c\xae\xf7\xe1\xa5\xdb\x37\x98\xc3\x47\x2c\x2c\x0a\x87\x67\x00\x0e\xeb\x46\x09\x87\x9d\xb2\xe4\x04\xfc\x4f\x68\x6d\x9c\x70\xd2\xe8\x5e\x39\x40\x63\x4d\x8d\xae\xc2\x96\x32\x69\xe6\x8d\xb1\x2e\x87\xc9\xd5\xc5\xd5\xe5\x04\x9e\x81\x43\xa5\x12\x09\x70\x06\xa8\xb0\xa2\x41\x98\xd7\xe8\xac\x2c\x88\x0f\xd7\x18\xa9\xdd\x73\x02\x5e\x9c\x75\x8a\xd5\xe8\x0c\x07\xa7\x00\x88\x58\xf8\xdf\xd1\x6e\x65\x81\x2f\x8b\xc2\xb4\xda\x7d\x18\x0b\x02\x6c\x8d\x6a\x6b\xec\x55\xcd\x3a\x55\x6b\xe9\x66\x1b\xdc\xf7\x1b\x10\xa3\xe0\x86\x0d\xe3\x93\x41\xdf\x8c\x97\x94\xde\xc1\x89\x54\x89\x2b\xd1\x2a\xf7\xde\x94\x98\xc3\xc5\xb7\x17\x17\xf0\x0c\x76\x15\x6a\xa8\xd9\x1a\x2c\xc1\xa2\x28\x67\x46\xab\xfd\x14\x76\x08\x3b\xa3\x9f\x3b\x58\x22\x88\xa5\x42\xc6\xa3\xa8\x6a\x53\x9e\x75\x0a\x9f\xc1\xa7\x4a\x12\x48\x02\x01\xae\x6e\x56\x04\x2d\x61\x09\x2b\x63\x61\x8d\x1a\xad\x70\x52\xaf\xe1\xee\xee\x67\xd8\xe0\x9e\x32\xb8\xd1\xf0\xee\xff\x09\x7e\x5c\xc0\x65\x76\x79\x31\xed\xb5\xc4\xbd\xc3\x11\x08\x84\xc5\xd4\x0e\x32\x6c\x8a\x46\x2c\x41\x00\x61\x23\x38\x28\x3a\xa0\x60\x87\xbd\x9a\x42\x68\xd8\x59\xe9\xd8\xd0\xec\x34\x7e\x6b\xd4\x3d\x18\x58\x37\x6e\xff\x5a\xda\x14\xc4\x1a\x4b\xd9\xd6\x39\xbc\xc7\xda\xd8\x7d\x7a\x4e\x84\x95\x51\xca\xec\xf8\x44\xdd\xd6\x92\xfc\x51\x5b\xe2\x67\x02\x8a\x96\x9c\xa9\x25\x23\xb0\xd1\x66\xa7\x7f\xaf\x0c\x39\xea\x55\xac\xa4\xc2\x29\xec\x2a\x59\x54\xb0\x37\x2d\xec\xa4\x52\xe1\x50\xce\x40\x69\x38\xcf\xf8\x31\x2f\xe2\x5f\x2c\x98\x9d\x66\xb3\x7b\x05\x16\x1b\x03\x56\xb8\x0a\x2d\xb8\x4a\xe8\x6e\xe3\xb5\x74\x55\xbb\x04\xc3\x0f\x11\x94\xdc\x60\x06\xbf\x99\xf6\xb9\x52\x20\x14\x99\xb8\xc5\x18\x6c\x90\x0e\xa4\x76\xc6\xaf\x29\x8c\x76\x42\x6a\xb4\x53\x58\xa2\x32\xbb\x0c\xee\x70\x40\xb5\x72\xae\xa1\x7c\x3e\x2f\x4d\x41\x19\x07\x56\x51\x72\xea\xa0\x9e\x73\xea\x91\x9b\xaf\x5b\x59\x22\xcd\x5b\xc2\x59\x63\xe5\x56\x38\xf4\xa1\xc7\x07\xc9\x2a\x57\xab\x5e\x53\xf4\x05\x51\x35\x2b\x8c\x5e\xc9\x75\xff\x0a\x20\x3c\x78\x2f\x9a\x3c\x79\x98\x26\xd2\x2c\x59\xf6\x57\xfd\x92\x6d\xda\x25\xce\x83\x92\x21\xfc\xbe\xe8\x93\x9d\xa4\x8a\x9f\x54\x62\x8b\x20\xa0\x94\xab\x15\x5a\x2e\x9a\x51\x43\x97\x55\x43\x61\xf4\x2e\x08\xea\x52\x27\x70\x71\xd9\xca\x12\x23\xec\x2b\xb9\xae\x45\x33\x18\x22\x5d\x05\x42\x03\x6a\x67\xf7\xfe\x0c\xf7\x41\xe8\x7e\x0a\x42\x97\xd0\xea\xc2\xd4\x5c\xad\xfd\xfa\x70\xda\xf7\xde\x9d\x42\x97\xbd\x16\xd4\x5b\xaf\x41\x22\x75\xfe\x3c\xf2\x00\xc3\xf0\x17\x3c\x90\x2c\xfb\xa2\x07\x7c\x25\x70\x06\x64\xcd\x75\x12\xae\x6f\xaf\x7d\x11\x80\x17\x7c\x2c\x92\x6b\x2d\xf5\xb0\x39\x1f\x6e\x8b\x56\xae\x64\xe1\x0b\x36\x34\xad\x6d\x0c\x21\x9d\x7f\x05\x90\xbd\x96\x50\x3e\x02\x8a\x0c\x10\xef\xf7\x15\xc0\x81\xb0\xeb\x21\x4d\x1f\x41\x6c\xdd\xac\xb9\x7e\x50\x02\xcd\xb8\x04\x3f\x7b\xa4\x08\x1f\xaf\x3b\x51\x84\x23\x9c\x0f\x0f\x33\xdf\x6f\x5f\x79\x90\xdf\x4a\x85\xaf\x8c\x76\x6c\xb7\xef\xbb\x5f\x87\x78\x84\x46\x74\x1e\x6d\x6d\xc0\x94\x81\x67\x9b\xca\x91\xa6\x61\x7d\x68\xab\x25\x1b\xc0\x28\xcd\xba\x64\x9b\x71\xe1\x02\xc6\x8f\xb1\x52\x52\x0f\x80\x9b\xc6\x2b\x96\x14\xf7\x2c\x33\xb8\xe9\xcd\x7f\x49\xaf\x62\x44\xb1\x08\xa1\x63\xeb\x9c\x6d\x71\x3a\x72\xdb\xd8\x4a\x6e\x26\x44\x6d\x1d\xce\xc2\x9d\x07\x7a\x35\x53\x30\x5c\xfd\x76\x92\xd0\x17\xb0\x5e\xb4\xd7\x15\x97\xdc\x79\x3f\x64\x27\x61\x4d\xed\xea\x61\x9d\xa5\x71\xde\x1d\x3c\x40\xd3\x77\x87\xa3\xfc\x38\xc8\x8e\x51\x42\xf1\x96\x4c\x84\x66\xfd\x0e\x9d\x11\x2f\xb4\x71\x27\x2c\x39\xff\xaf\x4c\xf9\x8a\xee\xff\x15\xd6\x74\x44\xed\xac\x3f\x5e\xe8\x02\x47\xdc\x23\x61\x27\x5d\xd4\x58\xf4\x3d\x5a\x1b\x98\xe4\xa1\x0b\x4c\x40\xd6\x62\x8d\xd4\x47\x59\x06\x6f\xa5\x2e\x7d\x24\xd5\xdc\xd2\x2c\x16\x43\xc5\x0c\xed\x4c\xa1\x20\xe4\xc6\xe5\x97\x72\x01\x60\x8e\x0a\xc2\xf5\x3d\xa7\x6a\x97\x59\x69\x8a\x0d\xda\xac\x30\xf5\xdc\xce\x43\xff\xf1\x3f\xe6\x4e\xf4\x69\x1b\x6b\x08\x73\x4d\xe6\xa1\xbc\xab\x13\x6b\x60\x4b\xb3\x5e\xc6\x6f\x93\x43\xa7\x50\x9a\x54\x5b\x7e\x99\x5d\x7e\x97\x5d\x8c\x65\x6f\x5b\xa5\x6e\x8d\x92\xc5\x3e\x87\x9b\xd5\x07\xe3\x6e\x2d\x52\x7a\x0a\x8b\x64\x5a\x5b\x20\xa5\xae\xb0\xf8\xef\x16\xc9\x8d\x9e\x01\x14\x4d\x9b\xc3\x77\x17\xf5\xe8\x61\xed\x69\x46\x0e\xdf\x7f\xfb\x5e\x0e\x14\xd5\xd8\x74\xf1\x6c\xf0\xcc\xad\xa7\xab\x57\x17\x57\xcc\xda\xa4\x5e\x19\x5b\xfb\xa4\x11\xaa\x97\x56\x72\x8b\x1a\x89\x6e\xad\x59\x62\x6a\x01\x43\x7a\x3d\x8e\x99\xb0\x55\x50\x38\x7e\x2c\x5c\x95\xc3\x5c\x34\x32\x20\xbd\xfd\x7e\x2e\x4b\xd4\x4e\xba\x7d\xd6\xb4\xcb\x44\x56\x6a\xe9\xa4\x50\xaf\x51\x89\xfd\x1d\xf7\x86\x92\x72\xf8\x2e\x11\x70\xb2\x46\xd3\xba\x13\xef\x98\xe0\xc9\xff\x0d\x53\x93\x86\x31\x72\xcc\x69\x6a\x0e\x81\x62\xdd\x06\xcb\xd0\x15\xde\xb2\x72\x4e\x54\x85\x0a\xe5\x6f\x3d\xa0\x4c\xd7\xeb\xd6\xec\x32\x90\x3a\xc4\xdc\x73\x0a\x6b\x88\xaa\xf9\x28\x87\x23\x66\xbf\x6a\xb5\xcf\x7d\x19\x65\x6d\xcc\xbf\x7d\x77\x5c\x76\xa4\x82\x53\xaa\x41\xbb\x32\xb6\x40\x56\x1a\x08\x37\xf3\xed\xc7\x0c\x4f\x39\xf1\xd8\xf6\xad\xb0\x9d\xed\x41\xec\xaf\x99\x9f\xe4\xe8\x8d\x2e\x54\xeb\xbb\x36\x5f\x1b\x02\xb9\x8a\x1d\x3d\xf0\xd2\x2f\xd0\xe8\x48\xa4\x7f\xe0\xa5\x07\x14\x77\x68\x66\x25\x16\x4a\x58\xbe\x2e\x2c\xcd\x36\x29\x00\x4f\x50\xd0\xd0\x9a\xd3\xc3\x5b\x63\xdc\x3c\x23\xaa\x1e\x3d\x80\xd0\xa3\x5d\x27\x03\x3d\x9a\x84\x9d\xa7\x51\x24\xd1\x80\x7a\x2b\xad\xd1\x9e\x8c\x04\x9e\x37\x79\xf7\xf9\xa7\x37\xaf\x7e\xfd\xf0\xf6\xe6\x7a\x12\xe8\xc7\x94\xf1\x30\x5b\xb4\x76\xcc\x15\x13\x35\xbe\xd9\x2f\xf7\x81\xc9\x39\x75\xea\x8c\x47\x24\xef\xf8\x8c\x43\x70\xb2\xf0\xa3\x07\x65\x52\xc1\x97\xde\xb8\x1b\x97\xe8\x84\x06\x77\xd6\x79\x9f\x24\x2a\x0e\xc9\x74\xea\x74\xcf\xa4\xe3\xb5\x4f\x68\x10\xca\xa1\xd5\x7c\xad\x3b\xb2\x78\x65\x4d\xdd\x73\x99\x9a\x49\x80\x20\x0e\xb7\x8e\xd1\x31\x0c\xca\x14\x1b\x3a\x76\x36\xea\x6d\x7e\x02\x97\x01\xee\x11\x2e\x5b\xa1\x5a\x3c\xc2\xe4\x4b\x41\x7c\x18\x03\x91\xef\x3d\x11\x01\x4c\x37\xc7\x34\xf3\x09\xa2\xf9\x48\x5c\xb2\x54\x60\xd6\x23\xb9\x71\x7d\x18\x8c\xee\xc6\x38\xc7\xb4\x72\x20\x04\x5f\xc5\x3b\x1e\x89\x9e\x64\x9f\x43\x56\xf1\x58\xd6\xef\x84\xf6\x74\x90\xda\xa6\x51\x7b\xf8\xf9\xd3\xa7\x5b\x58\x0a\x92\x05\x88\xd6\x55\xcc\x45\x7d\x15\x17\x2a\x30\x8a\xe1\x1e\xcc\x0a\xb7\x52\x78\xd0\xef\xaf\x6f\x3e\xfd\xfe\xf2\xf3\xa7\x9f\x3f\xdf\xbd\xf9\x78\xef\xa1\xee\x1f\xbd\x7b\xf3\xdb\xfd\x28\xd9\xb6\xc2\x4a\xb1\x54\x48\xf1\x62\x98\x28\xa4\x11\x5d\xec\x62\xe7\xad\x35\xf5\x38\x7e\x82\xd8\x47\x5c\xe5\x23\xd4\x47\x2c\x90\x8b\x2a\x1f\x61\x00\x80\xfd\x9d\x8f\xf0\x08\x10\x84\xd9\x0c\x96\xcc\x02\x0a\x51\x54\x4c\xbd\xf5\x28\xaf\xfa\xeb\x24\x23\xc5\xda\xa7\x89\x16\x63\xbb\xfb\x62\xb2\xa0\x9b\x2d\xf9\x85\x53\xbf\x49\x21\x74\xc4\xd8\x55\x48\x69\x1c\x0e\x77\x08\xb7\x33\x6c\x65\xcb\x38\xf9\x6c\xf7\x83\x30\xef\x5a\xa8\xcc\xce\xcf\x7d\x8c\xd6\x58\x78\x97\x49\x37\x8e\xdb\xd9\xac\x3f\x80\xbf\xf4\xf3\xe6\x8b\xfe\x51\xd6\x5d\x76\x32\xda\x16\x59\xa1\x5a\x72\x68\x33\x6e\x1e\x2a\x85\xe4\x33\x85\x3a\x37\x40\xf1\x2a\x88\xde\xdc\x8e\x0e\xc5\x25\x8f\xd0\xf9\xb9\xd2\x38\xab\x06\x1b\xa2\x3c\x47\x97\xb3\x2c\xe9\x27\x3d\x49\x9c\xa7\x16\x77\xd2\x8b\xb3\x11\xc3\x95\x04\x75\x4b\x7e\xf2\xe5\xd1\x93\x58\x86\x54\x5e\xfa\xa6\xea\xf9\xa5\x1f\x78\xbd\x88\x53\xa4\xf3\xd4\x96\x58\xd8\x42\x09\xe0\x00\x4e\xe6\x5e\x23\x43\xb8\x11\x85\xe6\x3a\x2b\xa5\x5d\x1c\xb5\xdc\xd4\xac\x8f\x09\xbb\x1d\x9c\xf7\xf9\xe3\x2f\x61\x30\x27\xf4\x3a\xbc\xbb\x96\xce\x0f\x8b\x48\x3a\x63\xf7\x7d\xab\x78\xcb\xac\x3c\x51\xf7\x54\xce\x71\xd8\x24\x67\xef\x52\xe6\x64\x3a\xa5\xb9\x10\x79\xfb\xff\xbd\x48\x33\xf3\x3c\x1f\xfe\x7e\xf7\xe6\xb7\xf3\xbf\x87\x91\x95\xa7\xf4\x2d\xa1\x9d\x0f\xc6\x66\x69\xa2\x33\x3e\x9c\x4e\xad\x55\x8b\x87\x07\xc8\xae\xa5\xe3\xc3\x8e\x4a\x56\x90\x58\x5a\xa1\x8b\x2a\x0a\xfd\xe4\xff\x0a\xc3\x68\x2e\x7b\xd7\xd2\x57\x2c\x3a\xb5\x92\xf9\x23\xaf\xbb\xf3\x91\x42\xff\x30\x52\x27\x0b\x26\xd3\x49\x37\xd3\x56\x84\xe9\xf2\xa7\x8b\x9a\x45\x0e\xbc\x22\x4c\x1b\x6a\xa1\xe5\x8a\xef\x03\x9c\x43\x24\x4b\xb4\xc1\x1d\x07\xb7\x2a\x3f\x8b\x33\x84\xd0\xea\x12\xed\x81\x8f\x2d\x2a\xe1\xe4\x16\x3d\xdd\xa5\x18\x81\xeb\x91\x9f\x0f\x72\xb2\x3f\x1c\xb5\xcb\x52\xda\xcb\x69\xf8\xf9\x4d\x3f\xa0\x1f\xc0\xf1\x03\xf8\x53\xe0\xf8\xa9\x76\x44\x35\x4a\x9d\x50\xf0\x99\xd0\x9e\x5a\xcf\xce\xed\x3d\xc7\x32\x70\x7a\xfd\x9b\x5a\xc8\x93\x06\x20\xbf\x88\x1a\xa2\xd4\xf0\x89\xe1\xa4\x3b\x90\x4b\xc9\xce\x30\xa0\xa8\xfd\xd8\x9a\x71\x62\xb6\x20\xdd\xc1\xe0\x29\xc5\xaa\xeb\xbb\x5d\x57\x5d\x3c\xd1\x66\xe3\x8a\x4e\x17\xaf\x5a\xfc\x6d\x83\x7b\x90\xe5\x8f\x4f\x51\xa8\xc4\x1a\x5e\x2a\x5c\x6b\x71\x34\xf5\x3a\xb1\x87\x7f\xbd\x9f\xf5\xf2\x34\x2a\x53\xb1\x4a\x83\x74\x50\x09\xf2\xed\xdf\x68\xb5\x07\x51\x14\x48\xa1\x92\x57\x18\x06\xc7\x2f\xe2\x8c\xf2\x7e\x25\x14\xe1\xfd\xf9\x59\x9c\x8a\x5c\x4b\xf7\xb1\xe3\x0d\xa7\x7c\x10\x95\x7a\xf9\xe3\x3c\x38\x2d\x76\xc2\x3f\xe4\x6c\x5b\xb8\x60\xef\xce\x8f\x10\x98\x56\xb6\x0e\x68\xaf\x0b\x58\x1a\xb3\xd9\x20\x36\x1c\xed\xbd\xa9\x93\xb5\x74\x93\x29\xd4\x28\x18\x68\x2e\x64\x20\xfc\xbd\xbe\x4b\x80\xb6\x21\x67\x51\xd4\x7d\x26\x9c\x1f\x18\xc6\xaa\x67\xe4\x84\xc3\x05\x17\x96\x47\xe3\x45\xe3\x1f\x2e\x06\x4d\xd2\xe9\x84\x86\x49\xdc\x63\x12\xfb\x50\xa2\xe4\x05\x66\xeb\x6c\x0a\xff\x42\x66\xb3\xaf\x94\x69\xcb\xf3\xcc\x0f\xd5\x9c\xd9\x60\x98\x8b\x09\xeb\x64\xd1\x2a\x61\xa3\x33\x3a\x2d\x87\x2d\xb4\xdb\x75\xb1\x23\xae\x9f\x05\xeb\xca\x76\xac\x37\xdb\x19\xbb\xa1\xfe\x82\x7b\xb0\xcc\x6f\xb4\x10\xcb\xe2\xf2\x9b\xab\xe3\xff\xd3\x03\xbf\x09\xd1\x17\xab\x51\xff\x81\xc6\xe8\x27\x42\xe3\x7d\x27\x7d\x3d\x08\x1f\x44\x48\xd4\x37\x1b\xf4\x2d\x3c\xf7\x7c\x3c\x5a\x4e\x2d\xf1\x1b\x3f\x12\x3a\x77\x68\xb7\x27\xbe\xc0\xf1\x25\x64\x60\x3e\x9c\xa3\x3f\xa4\x2d\x58\x6c\xb8\x7d\x85\x28\x23\x74\xc9\x67\xbd\xe7\xc9\x97\xc1\xe4\x13\x1f\x3b\xc7\x8f\xaa\xfd\x45\x20\x1b\x9d\x52\x49\x72\xa8\x67\x9d\x09\x8b\xfc\xea\xe2\xea\xf2\xac\xab\x5f\x2f\xcb\x52\x86\x21\x0c\x37\xd8\x97\x4c\xee\x47\x47\x1e\xde\x0f\x1c\x6b\x44\x98\xad\x6f\xdc\x5f\xd0\x33\xf3\x5f\x5a\xd3\x27\x09\x58\x43\x45\x8c\x9b\xfe\xda\x74\x5b\xbe\xfe\x70\x17\x09\x13\x4d\xfb\x51\x6b\x47\x9f\x40\x97\xc6\x51\x1c\xe3\xd6\x62\xef\x07\x5a\x6a\x3b\xcc\x66\x35\x29\x63\x36\x6d\x03\x92\xa8\x45\x02\xa3\x81\x4c\x8d\xf0\xae\x5d\xa2\xd5\xe8\xd0\xcf\x75\xdb\x86\x86\x89\x79\xa9\x29\xce\xcc\x26\x1f\x8c\xc6\x49\xfa\x26\xdc\x40\xd2\x99\x79\xd8\x9c\xc6\x63\xf4\x78\x15\xf1\xf6\x8d\xde\xf4\xf7\xb4\xc9\xe5\xe4\xec\x3f\x01\x00\x00\xff\xff\xf8\x21\xbe\x5d\xdd\x1e\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-config.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
